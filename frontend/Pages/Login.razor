@page "/login"
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@using Shared.DTOs
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@using Blazored.LocalStorage
@using Shared.Models
@using frontend.Authentication

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h3 class="text-center mb-4">Kirjaudu Sisään</h3>

            <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label" for="email">Sähköposti:</label>
                    <InputText id="email" class="form-control" @bind-Value="loginRequest.Email" />
                </div>
                <div class="mb-3">
                    <label class="form-label" for="password">Salasana:</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
                </div>
                <div class="mb-3 text-center">
                    <button type="submit" class="btn btn-primary">Kirjaudu</button>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert @(IsSuccess ? "alert-success" : "alert-danger")" role="alert">
                    @Message
                </div>
            }
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private string Message { get; set; } = string.Empty;
    private bool IsSuccess { get; set; } = false;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/api/auth/login", loginRequest);
            if (response.IsSuccessStatusCode)
            {
                var loginResult = await response.Content.ReadFromJsonAsync<LoginResult>();
                await LocalStorage.SetItemAsync("authToken", loginResult.Token);
                
                // Mark user as authenticated and force a state change
                ((CustomAuthenticationStateProvider)AuthStateProvider).MarkUserAsAuthenticated(loginResult.Token);
                await AuthStateProvider.GetAuthenticationStateAsync(); // Force a refresh
                
                Message = "Kirjautuminen onnistui!";
                IsSuccess = true;
                NavigationManager.NavigateTo("/", true); // Force page reload
            }
            else
            {
                Message = "Kirjautuminen epäonnistui. Tarkista sähköposti ja salasana.";
                IsSuccess = false;
            }
        }
        catch (Exception ex)
        {
            Message = $"Virhe: {ex.Message}";
            IsSuccess = false;
        }
    }
}
