@page "/manage-account"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Shared.Models
@using System.Security.Claims

<h3>Manage Accounts</h3>

@if (!isAuthorized)
{
    <div class="alert alert-danger">
        <strong>Pääsy estetty:</strong> Sinulla ei ole oikeuksia tähän toimintoon.
    </div>
}
else
{
    @if (users == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Email</th>
                    <th>Rooli</th>
                    <th>Etunimi</th>
                    <th>Sukunimi</th>
                    <th>Osoite</th>
                    <th>Puhelinnumero</th>
                    <th>Toiminnot</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.Email</td>
                        <td>@user.Role</td>
                        <td>@user.FirstName</td>
                        <td>@user.LastName</td>
                        <td>@user.Address</td>
                        <td>@user.PhoneNumber</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => EditUser(user)">Muokkaa</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.UserID)">Poista</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (isEditing && editingUser != null)
    {
        <EditForm Model="editingUser" OnValidSubmit="UpdateUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" class="form-control" @bind-Value="editingUser.Email" />
            </div>
            <div class="mb-3">
                <label for="role" class="form-label">Rooli</label>
                <InputText id="role" class="form-control" @bind-Value="editingUser.Role" />
            </div>
            <div class="mb-3">
                <label for="firstName" class="form-label">Etunimi</label>
                <InputText id="firstName" class="form-control" @bind-Value="editingUser.FirstName" />
            </div>
            <div class="mb-3">
                <label for="lastName" class="form-label">Sukunimi</label>
                <InputText id="lastName" class="form-control" @bind-Value="editingUser.LastName" />
            </div>
            <div class="mb-3">
                <label for="address" class="form-label">Osoite</label>
                <InputText id="address" class="form-control" @bind-Value="editingUser.Address" />
            </div>
            <div class="mb-3">
                <label for="phoneNumber" class="form-label">Puhelinnumero</label>
                <InputText id="phoneNumber" class="form-control" @bind-Value="editingUser.PhoneNumber" />
            </div>

            <button type="submit" class="btn btn-primary">Tallenna</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Peruuta</button>
        </EditForm>
    }
}

@code {
    private List<UserModel>? users;
    private UserModel? editingUser;
    private bool isEditing = false;
    private bool isAuthorized = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        Console.WriteLine($"Authenticated: {user.Identity?.IsAuthenticated}");

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();
            Console.WriteLine($"Roles: {string.Join(", ", roles)}");

            if (roles.Contains("Admin"))
            {
                isAuthorized = true;
                await LoadUsers();
            }
            else
            {
                Console.WriteLine("User is not authorized.");
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<UserModel>>("/api/auth/users");
            if (users == null)
            {
                Console.WriteLine("Failed to load users.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private void EditUser(UserModel user)
    {
        // Create a copy to avoid directly editing the list
        editingUser = new UserModel
            {
                UserID = user.UserID,
                Email = user.Email,
                Role = user.Role,
                FirstName = user.FirstName,
                LastName = user.LastName,
                Address = user.Address,
                PhoneNumber = user.PhoneNumber
            };
        isEditing = true;
    }

    private async Task UpdateUser()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/auth/updateuser/{editingUser.UserID}", editingUser);
            if (response.IsSuccessStatusCode)
            {
                isEditing = false;
                await LoadUsers();
                await JSRuntime.InvokeVoidAsync("alert", "Käyttäjä päivitetty onnistuneesti.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Käyttäjän päivittäminen epäonnistui.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Virhe: {ex.Message}");
        }
    }

    private async Task DeleteUser(int userId)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Haluatko varmasti poistaa tämän käyttäjän?");
            if (confirmed)
            {
                var response = await Http.DeleteAsync($"/api/auth/users/{userId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadUsers();
                    await JSRuntime.InvokeVoidAsync("alert", "Käyttäjä poistettu onnistuneesti.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Käyttäjän poistaminen epäonnistui.");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Virhe: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        editingUser = null;
    }
}